{{- if eq .chezmoi.os "linux" -}}
{{- if eq .chezmoi.osRelease.id "arch" -}}
#!/bin/bash

# Install pacman packages
{{- if .packages.arch.pacman }}
echo "Installing pacman packages..."
sudo pacman -S --needed --noconfirm \
{{- range .packages.arch.pacman }}
  {{ . }} \
{{- end }}
  2>/dev/null || true
{{- end }}

# Install AUR packages (requires yay or paru)
{{- if .packages.arch.aur }}
if command -v yay &> /dev/null; then
  echo "Installing AUR packages with yay..."
  yay -S --needed --noconfirm \
{{- range .packages.arch.aur }}
    {{ . }} \
{{- end }}
    2>/dev/null || true
elif command -v paru &> /dev/null; then
  echo "Installing AUR packages with paru..."
  paru -S --needed --noconfirm \
{{- range .packages.arch.aur }}
    {{ . }} \
{{- end }}
    2>/dev/null || true
else
  echo "Warning: No AUR helper found (yay or paru). Skipping AUR packages."
  echo "AUR packages to install manually:"
{{- range .packages.arch.aur }}
  echo "  - {{ . }}"
{{- end }}
fi
{{- end }}

{{- end }}
{{- end }}

# Configure interception-tools for Caps Lock dual function
if command -v intercept &> /dev/null && command -v dual-function-keys &> /dev/null; then
  echo "Setting up interception-tools..."
  
  sudo mkdir -p /etc/interception

  # Create dual-function-keys config
  sudo tee /etc/interception/dual-function-keys.yaml > /dev/null << 'EOF'
TIMING:
  TAP_MILLISEC: 200
  DOUBLE_TAP_MILLISEC: 0

MAPPINGS:
  - KEY: KEY_CAPSLOCK
    TAP: KEY_ESC
    HOLD: KEY_CAPSLOCK  # Acts as MOD5 in Hyprland with lv3:caps_switch
EOF

    # Create udevmon config
    sudo tee /etc/interception/udevmon.yaml > /dev/null << 'EOF'
- JOB: intercept -g $DEVNODE | dual-function-keys -c /etc/interception/dual-function-keys.yaml | uinput -d $DEVNODE
  DEVICE:
    EVENTS:
      EV_KEY: [KEY_CAPSLOCK]
EOF

  echo "Created interception-tools configs"

  # Enable udevmon service if not already enabled
  if ! systemctl is-enabled udevmon &> /dev/null; then
    sudo systemctl enable --now udevmon
    echo "udevmon service enabled and started"
  else
    echo "udevmon service already enabled"
  fi
fi

# Configure keyd for Alt+bracket remappings
if command -v keyd &> /dev/null; then
  echo "Setting up keyd..."
  
  # Create global keyd config (without capslock handling)
  sudo mkdir -p /etc/keyd
  sudo tee /etc/keyd/default.conf > /dev/null << 'EOF'
[ids]
# Match all keyboards except event3 (physical AT keyboard handled by interception-tools)
# The virtual keyboard from interception-tools will have a different event number
*
-/dev/input/event3

[main]
# Global Alt+Shift+bracket for tab switching (works everywhere)
[alt+shift]
[ = C-pageup
] = C-pagedown

# Note: Alt+bracket (without Shift) for browser back/forward is handled 
# per-application via keyd-application-mapper (see ~/.config/keyd/app.conf)
EOF
  
  echo "Updated keyd config"

  # Create systemd drop-in to ensure keyd starts after udevmon
  sudo mkdir -p /etc/systemd/system/keyd.service.d
  sudo tee /etc/systemd/system/keyd.service.d/10-after-udevmon.conf > /dev/null << 'EOF'
[Unit]
# Ensure udevmon starts before keyd
After=udevmon.service
# Also restart keyd if udevmon restarts
BindsTo=udevmon.service

[Service]
# Add a small delay to ensure udevmon fully initializes
ExecStartPre=/bin/sleep 2
EOF

  # Enable keyd service if not already enabled
  if ! systemctl is-enabled keyd &> /dev/null; then
    sudo systemctl enable --now keyd
    echo "keyd service enabled and started"
  else
    # Reload systemd to pick up drop-in changes
    sudo systemctl daemon-reload
    # Reload keyd config
    sudo keyd reload
    echo "keyd config reloaded"
  fi
  
  # Add user to keyd group for keyd-application-mapper
  if ! groups | grep -q keyd; then
    sudo usermod -aG keyd $USER
    echo "Added $USER to keyd group (re-login required for group change to take effect)"
  fi
fi

# Install Python tools with uv (cross-platform)
{{- if .packages.python.uv.tools }}
if command -v uv &> /dev/null; then
  echo "Installing Python tools with uv..."
{{- range .packages.python.uv.tools }}
  uv tool install {{ . | quote }}
{{- end }}
else
  echo "Warning: uv not found. Skipping Python tools installation."
fi
{{- end }}
